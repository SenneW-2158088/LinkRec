@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:         <http://www.w3.org/2002/07/owl#>

@prefix foaf:        <http://xmlns.com/foaf/0.1/>
@prefix wd:  <http://www.wikidata.org/entity/> .
@prefix gn:  <https://www.geonames.org/ontology#> .
@prefix vcard: http://www.w3.org/2006/vcard/ns#

@prefix user: <http://linkrec:8080/ontology/user/> .
@prefix experience: <http://linkrec:8080/ontology/experience/> .
@prefix requirement: <http://linkrec:8080/ontology/requirement/> .
@prefix education: <http://linkrec:8080/ontology/education/> .
@prefix job:  <http://linkrec:8080/ontology/job/> .
@prefix profession:  <http://linkrec:8080/ontology/profession/> .
@prefix lr_user: <http://linkrec:8080/user/> .
@prefix lr_experience: <http://linkrec:8080/experience/> .
@prefix lr_requirement: <http://linkrec:8080/requirement/> .
@prefix lr_education: <http://linkrec:8080/education/> .
@prefix lr_job:  <http://linkrec:8080/job/> .
@prefix lr_profession:  <http://linkrec:8080/profession/> .

# OWL inferencing
[owlSameAsInference:
    (?x owl:sameAs ?y)
    (?s ?y ?o)
    ->
    (?s ?x ?o)
]

# Profession hierarchy inference
# Example: If a Web Developer is a subProfessionOf a Software Developer,
# and a Software Developer is a subProfessionOf a Developer,
# then a Web Developer is a subProfessionOf a Developer
#
# We can now find all users that have a profession which is
# a subProfessionOf developer (even Web Developer)
[userProfessionInference:
    (?experience experience:hasTitle ?experienceProfession)
    (?experienceProfession profession:subProfessionOf ?profession)
    ->
    (?experience experience:hasTitle ?profession)
]

# [userLocationInference:
# if user lives in a city, then the user lives in the country of the city (parentFeature)
# ]

# Education Inference
# TODO

# Experience level inference
[experienceLevelInference:
    (?experience experience:hasYears ?years)
    (?level experience:hasMinYears ?min)
    (?level experience:hasMaxYears ?max)
    ge(?years, ?min)
    le(?years, ?max)
    ->
    (?experience experience:hasExperienceLevel ?level)
]
[requirementExperienceLevelInference:
    (?requirement requirement:requiredYears ?years)
    (?level experience:hasMinYears ?min)
    (?level experience:hasMaxYears ?max)
    ge(?years, ?min)
    le(?years, ?max)
    ->
    (?requirement experience:hasExperienceLevel ?level)
]
