
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:         <http://www.w3.org/2002/07/owl#>

@prefix foaf:        <http://xmlns.com/foaf/0.1/>
@prefix wd:  <http://www.wikidata.org/entity/> .
@prefix gn:  <https://www.geonames.org/ontology#> .
@prefix vcard: <http://www.w3.org/2006/vcard/ns#> .

@prefix user: <http://linkrec:8080/ontology/user/> .
@prefix employer: <http://linkrec:8080/ontology/employer/> .
@prefix experience: <http://linkrec:8080/ontology/experience/> .
@prefix requirement: <http://linkrec:8080/ontology/requirement/> .
@prefix education: <http://linkrec:8080/ontology/education/> .
@prefix job:  <http://linkrec:8080/ontology/job/> .
@prefix profession:  <http://linkrec:8080/ontology/profession/> .
@prefix language: <http://linkrec:8080/ontology/language/> .
@prefix languageLevel: <http://linkrec:8080/ontology/languageLevel/> .
@prefix location: <http://linkrec:8080/ontology/location/> .
@prefix lr_user: <http://linkrec:8080/user/> .
@prefix lr_experience: <http://linkrec:8080/experience/> .
@prefix lr_requirement: <http://linkrec:8080/requirement/> .
@prefix lr_education: <http://linkrec:8080/education/> .
@prefix lr_job:  <http://linkrec:8080/job/> .
@prefix lr_profession:  <http://linkrec:8080/profession/> .
@prefix lr_language: <http://linkrec:8080/language/> .
@prefix lr_languageLevel: <http://linkrec:8080/languageLevel/> .


# OWL inferencing
[owlSameAsInference:
    (?x owl:sameAs ?y)
    (?s ?y ?o)
    ->
    (?s ?x ?o)
]

# Profession hierarchy inference
# Example: If a Web Developer is a subProfessionOf a Software Developer,
# and a Software Developer is a subProfessionOf a Developer,
# then a Web Developer is a subProfessionOf a Developer
#
# We can now find all users that have a profession which is
# a subProfessionOf developer (even Web Developer)
[userProfessionInference:
    (?experience experience:hasProfession ?experienceProfession)
    (?experienceProfession profession:subProfessionOf ?profession)
    ->
    (?experience experience:hasProfession ?profession)
]

[jobLocationInference:
    (?job job:hasLocation ?locationName)
    (?location location:hasName ?locationName)
    ->
    (?job job:hasLocation ?location)
]


[userLocationInference:
    (?user user:hasLocation ?locationName)
    (?location location:hasName ?locationName)
    ->
    (?user user:hasLocation ?location)
]

[userLanguageInference:
    (?user user:hasLanguage ?languageName)
    (?language rdfs:label ?languageName)
    ->
    (?user user:hasLanguage ?language)
]

[userEducationInference:
    (?user user:hasEducation ?educationName)
    (?education rdfs:label ?educationName)
    ->
    (?user user:hasEducation ?education)
]

[requirementProfessionInference:
    (?requirement requirement:hasProfession ?requirementProfession)
    (?requirementProfession profession:subProfessionOf ?profession)
    ->
    (?requirement requirement:hasProfession ?profession)
]

[requirementLanguageInference:
    (?requirement requirement:hasLanguage ?languageName)
    (?language rdfs:label ?languageName)
    ->
    (?requirement requirement:hasLanguage ?language)
]

[requirementEducationInference:
    (?requirement requirement:hasEducation ?educationName)
    (?education rdfs:label ?educationName)
    ->
    (?requirement requirement:hasEducation ?education)
]

# Experience level inference
[experienceLevelInference:
    (?experience experience:hasYears ?years)
    (?level experience:hasMinYears ?min)
    (?level experience:hasMaxYears ?max)
    ge(?years, ?min)
    le(?years, ?max)
    ->
    (?experience experience:hasExperienceLevel ?level)
]

[requirementExperienceLevelInference:
    (?requirement requirement:requiredYears ?years)
    (?level experience:hasMinYears ?min)
    (?level experience:hasMaxYears ?max)
    ge(?years, ?min)
    le(?years, ?max)
    ->
    (?requirement experience:hasExperienceLevel ?level)
]

[userJobMatchingProfessionInference:
# Location matches
    (?user user:hasLocation ?userLocation)
    (?job job:hasLocation ?jobLocation)

# Experience matches
    (?job job:hasRequirement ?requirement)
    (?requirement requirement:hasProfession ?profession)
    (?user user:hasExperience ?experience)
    (?experience experience:hasProfession ?profession)
    ->
    (?user user:matchesRequirement ?requirement)
]
[userJobMatchingLanguageInference:
# Location matches
    (?user user:hasLocation ?userLocation)
    (?job job:hasLocation ?jobLocation)

# Language matches
    (?job job:hasRequirement ?requirement)
    (?requirement requirement:hasLanguage ?language)
    (?user user:hasLanguage ?language)
    ->
    (?user user:matchesRequirement ?requirement)
]
[userJobMatchingEducationInference:
# Location matches
    (?user user:hasLocation ?userLocation)
    (?job job:hasLocation ?jobLocation)

# Education matches
    (?job job:hasRequirement ?requirement)
    (?requirement requirement:hasEducation ?education)
    (?user user:hasEducation ?education)
    ->
    (?user user:matchesRequirement ?requirement)
]
