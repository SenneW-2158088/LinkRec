
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .

@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix wd:   <http://www.wikidata.org/entity/> .
@prefix gn:   <https://www.geonames.org/ontology#> .
@prefix vcard: <http://www.w3.org/2006/vcard/ns#> .

@prefix lr: <http://linkrec:8080/ontology/> .
@prefix user: <http://linkrec:8080/user/> .
@prefix experience:  <http://linkrec:8080/experience/> .
@prefix requirement: <http://linkrec:8080/requirement/> .
@prefix education:   <http://linkrec:8080/education/> .
@prefix job:  <http://linkrec:8080/job/> .
@prefix employer: <http://linkrec:8080/employer/> .


# OWL inferencing
[owlSameAsInference:
    (?x owl:sameAs ?y)
    (?s ?y ?o)
    ->
    (?s ?x ?o)
]

# Profession hierarchy inference
# Example: If a Web Developer is a subProfessionOf a Software Developer,
# and a Software Developer is a subProfessionOf a Developer,
# then a Web Developer is a subProfessionOf a Developer
#
# We can now find all users that have a profession which is
# a subProfessionOf developer (even Web Developer)
[userProfessionInference:
    (?experience lr:hasProfession ?experienceProfession)
    (?experienceProfession lr:subProfessionOf ?profession)
    ->
    (?experience lr:hasProfession ?profession)
]

[locationInference:
    (?job lr:hasLocation ?locationName)
    (?location lr:hasGeoName ?locationName)
    ->
    (?job lr:hasLocation ?location)
]


[alternateLocationInference:
    (?user lr:hasLocation ?locationName)
    (?location lr:hasAlternateGeoName ?locationName)
    ->
    (?user lr:hasLocation ?location)
]

[userLanguageInference:
    (?user lr:hasLanguage ?languageName)
    (?language rdfs:label ?languageName)
    ->
    (?user lr:hasLanguage ?language)
]

[userEducationInference:
    (?user lr:hasEducation ?userEducation)
    (?userEducation lr:hasTitle ?educationName)
    (?education rdfs:label ?educationName)
    ->
    (?userEducation lr:hasTitle ?education)
]

[requirementProfessionInference:
    (?requirement lr:hasProfession ?requirementProfession)
    (?profession rdfs:label ?requirementProfession)
    ->
    (?requirement lr:hasProfession ?profession)
]

[requirementLanguageInference:
    (?requirement lr:hasLanguage ?languageName)
    (?language rdfs:label ?languageName)
    ->
    (?requirement lr:hasLanguage ?language)
]

[requirementEducationInference:
    (?requirement lr:hasEducationTitle ?educationName)
    (?education rdfs:label ?educationName)
    ->
    (?requirement lr:hasEducationTitle ?education)
]

# Experience level inference
[experienceLevelInference:
    (?experience lr:hasYears ?years)
    (?level lr:hasMinYears ?min)
    (?level lr:hasMaxYears ?max)
    ge(?years, ?min)
    le(?years, ?max)
    ->
    (?experience lr:hasExperienceLevel ?level)
]

[requirementExperienceLevelInference:
    (?requirement lr:requiredYears ?years)
    (?level lr:hasMinYears ?min)
    (?level lr:hasMaxYears ?max)
    ge(?years, ?min)
    le(?years, ?max)
    ->
    (?requirement lr:hasExperienceLevel ?level)
]

[userJobMatchingProfessionInference:
# Location matches
    (?user lr:hasLocation ?userLocation)
    (?job lr:hasLocation ?jobLocation)

# Experience matches
    (?job lr:hasRequirement ?requirement)
    (?requirement lr:hasProfession ?profession)
    (?user lr:hasExperience ?experience)
    (?experience lr:hasProfession ?profession)
    ->
    (?user lr:matchesRequirement ?requirement)
]
[userJobMatchingLanguageInference:
# Location matches
    (?user lr:hasLocation ?userLocation)
    (?job lr:hasLocation ?jobLocation)

# Language matches
    (?job lr:hasRequirement ?requirement)
    (?requirement lr:hasLanguage ?language)
    (?user lr:hasLanguage ?language)
    ->
    (?user lr:matchesRequirement ?requirement)
]
[usrJobMatchingEducationInference:
    (?user lr:hasLocation ?userLocation)
    (?job lr:hasLocation ?jobLocation)

    (?job lr:hasRequirement ?requirement)
    (?requirement lr:hasEducationTitel ?educationTitle)
    (?user lr:hasEducation ?userEducation)
    (?userEducation lr:hasTitle ?educationTitle)
    ->
    (?user lr:matchesRequirement ?requirement)
]

[userJobMatchingEducationInference:
    (?user lr:hasLocation ?userLocation)
    (?job lr:hasLocation ?jobLocation)

    (?job lr:hasRequirement ?requirement)
    (?requirement lr:hasDegree ?educationDegree)
    (?user lr:hasEducation ?userEducation)
    (?userEducation lr:hasDegree ?educationDegree)
    ->
    (?user lr:matchesRequirement ?requirement)
]
